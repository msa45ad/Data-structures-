#include <stdio.h>
#include <stdlib.h>
struct node {
    int data;
    struct node *next;
};
struct node* createNode(int val) {
    struct node *newNode = (struct node *)malloc(sizeof(struct node));
    newNode->data = val;
    newNode->next = NULL;
    return newNode;
}

void insertAtEnd(struct node **head, int val) {
    struct node *newNode = createNode(val);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void display(struct node *head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }
    struct node *temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

void sortList(struct node *head) {
    if (head == NULL) return;

    struct node *i, *j;
    int temp;

    for (i = head; i != NULL; i = i->next) {
        for (j = i->next; j != NULL; j = j->next) {
            if (i->data > j->data) {
                temp = i->data;
                i->data = j->data;
                j->data = temp;
            }
        }
    }
}

void reverseList(struct node **head) {
    struct node *prev = NULL, *current = *head, *next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    *head = prev;
}

void concatenateLists(struct node **head1, struct node *head2) {
    if (*head1 == NULL) {
        *head1 = head2;
        return;
    }

    struct node *temp = *head1;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = head2;
}

int main() {
    struct node *head1 = NULL, *head2 = NULL;
    int choice, val, pos;

    while (1) {
        printf("\nSelect an operation:\n");
        printf("1. Insert at the end of first list\n");
        printf("2. Insert at the end of second list\n");
        printf("3. Sort the first list\n");
        printf("4. Reverse the first list\n");
        printf("5. Concatenate the two lists\n");
        printf("6. Display the first list\n");
        printf("7. Display the second list\n");
        printf("8. Exit\n");

        printf("Enter your choice: ");
        scanf("%d", &choice);

        if (choice == 1) {
            printf("Enter value to insert at the end of the first list: ");
            scanf("%d", &val);
            insertAtEnd(&head1, val);
        } else if (choice == 2) {
            printf("Enter value to insert at the end of the second list: ");
            scanf("%d", &val);
            insertAtEnd(&head2, val);
        } else if (choice == 3) {
            sortList(head1);
            printf("First list sorted.\n");
        } else if (choice == 4) {
            reverseList(&head1);
            printf("First list reversed.\n");
        } else if (choice == 5) {
            concatenateLists(&head1, head2);
            printf("Lists concatenated.\n");
        } else if (choice == 6) {
            printf("First list: ");
            display(head1);
        } else if (choice == 7) {
            printf("Second list: ");
            display(head2);
        } else if (choice == 8) {
            printf("Exiting...\n");
            break;
        } else {
            printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
